###############################################################################
##                                                                           ##
##                       DO NOT EDIT!!!!                                     ##
##                                                                           ##
##            THIS FILE IS GENERATED BY THE DEMO TASK.                       ##
##            ALL CONTENTS WILL BE OVERWRITTEN.                              ##
###############################################################################


###############################################################################
##                                                                           ##
## The MIT License (MIT)                                                     ##
##                                                                           ##
## Copyright (c) 2014 AT&T Inc.                                              ##
##                                                                           ##
## Permission is hereby granted, free of charge, to any person obtaining     ##
## a copy of this software and associated documentation files                ##
## (the "Software"), to deal in the Software without restriction, including  ##
## without limitation the rights to use, copy, modify, merge, publish,       ##
## distribute, sublicense, and/or sell copies of the Software, and to permit ##
## persons to whom the Software is furnished to do so, subject to the        ##
## conditions as detailed in the file LICENSE.                               ##
##                                                                           ##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS   ##
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                ##
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.    ##
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY      ##
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT ##
## OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR  ##
## THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                ##
##                                                                           ##
###############################################################################

$nat_subnet_start = <%= NAT_SUBNET_START %>
$num_comps = <%= NUM_COMPS %>
$ssh_nat_start = <%= NAT_SSH_START %>

# -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure("2") do |config|
  config.vm.boot_timeout = 3600
  config.vm.synced_folder ".", "/vagrant", disabled: true
  nodes = <%= DEMO_VMS.inspect %>

  nodes.each_with_index do |node, idx|
    ssh_port = $ssh_nat_start + idx
    nat_subnet = $nat_subnet_start + idx

    box = "steigr/pxe"
    box = "doctorjnupe/precise64_dhcpclient_on_eth7"  if node.eql? "ops1"

    config.vm.define node do |t|
      t.vm.box = box
      t.vm.hostname = "#{node}.<%= @zone %>.example.com"
      t.vm.synced_folder ".", "/occam", disabled: false
      t.vm.provider "virtualbox" do |prov|
        prov.gui = true
        prov.memory = 2048
        prov.cpus = 2
        prov.customize ["modifyvm", :id, "--natpf1", "delete", "ssh" ]
        nic1_opts = [
          "modifyvm", :id,
          "--nic1", "hostonly",
          "--hostonlyadapter1", "<%= @network %>",
          "--macaddress1",
        ]
        if node.eql? "ctrl1"
          nic1_opts << "<%= @ctrl_mac %>"
        elsif node.eql? "monit1"
          nic1_opts << "<%= @monit_mac %>"
        else
          nic1_opts << "auto"
        end

        prov.customize nic1_opts

        (2..5).each do |num|
          if node.eql? "ctrl1" and num.eql? 2
            options = ["modifyvm", :id,
                       "--nic#{num}", "hostonly",
                       "--hostonlyadapter2", "<%= @pubnet %>",
                       "--nicpromisc#{num}", "allow-all"
            ]
            else
          options = ["modifyvm", :id,
                     "--nic#{num}",
                     "hostonly",
                     "--hostonlyadapter#{num}",
                     "<%= @network %>",
                     "--cableconnected#{num}",
                     "off"
          ]
          end
          prov.customize options
        end
        # private network:
        prov.customize ["modifyvm", :id, "--nic6", "intnet", "--intnet6", "private" ]
        # unused interface:
        prov.customize ["modifyvm", :id,
                        "--nic7",
                        "intnet",
                        "--intnet7",
                        "private",
                        "--cableconnected7",
                        "off"
        ]
        # NAT interface required by Vagrant:
        prov.customize ["modifyvm", :id,
                        "--nic8",
                        "nat",
                        "--natnet8",
                        "10.99.#{nat_subnet}/24",
                        "--natpf8",
                        "ssh,tcp,127.0.0.1,#{ssh_port},,22" ]
        if node.eql? "ops1"
          # set up eth0 interface with 192.168.3.10/24 address after first boot
          op_prov = "echo -e '\nauto eth0\niface eth0 inet static\n  address "
          op_prov << "192.168.3.10\n  netmask 255.255.255.0\n  dns-nameservers "
          op_prov << "8.8.8.8\n' >> /etc/network/interfaces; ifup eth0"
          t.vm.provision "shell", inline: op_prov
        else
          # attaching IPXE floppy image:
          prov.customize ["storageattach", :id, "--storagectl",
                          "Floppy Controller", "--type", "fdd", "--device", "0",
                          "--medium",
                          "<%= @disks_directory %>/#{node}_ipxe.dsk"]
          # attaching disks, because steigr/pxe box have no disks by default:
          file_to_disk = "<%= @disks_directory %>/#{node}_disk1.vdi"
          unless File.exist?(file_to_disk)
            prov.customize ['createhd', '--filename', file_to_disk, '--size', 1024 * 200]
          end
          prov.customize ["storageattach", :id, "--storagectl", "SATA Controller",
                          "--port", "0", "--type", "hdd", "--medium",
                          "#{file_to_disk}" ]
        end
      end
    end
  end

  config.vm.define :openam do |t|
    t.vm.box = "hashicorp/precise64"
    t.vm.hostname = "openam.example.com"
    t.vm.network :private_network, ip: "192.168.20.13"
  end

end
